//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Controller/PlayerControll.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControll: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControll()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControll"",
    ""maps"": [
        {
            ""name"": ""UI"",
            ""id"": ""8b233379-f6f3-482d-b167-7fb2b9036f2e"",
            ""actions"": [
                {
                    ""name"": ""Dpad Up"",
                    ""type"": ""Button"",
                    ""id"": ""654c55eb-f254-48b7-9d21-9a98337c0408"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dpad Down"",
                    ""type"": ""Button"",
                    ""id"": ""213ae102-1bde-45b4-bf05-a1325325e4fa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dpad Left"",
                    ""type"": ""Button"",
                    ""id"": ""d6245381-7815-468f-a4cb-f6c657c72602"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dpad Right"",
                    ""type"": ""Button"",
                    ""id"": ""bb04dcd0-d912-456b-b152-dba19499bf86"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ae982b22-79a0-4433-a7c2-efb7a8d7bb4f"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dpad Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""62ad606f-7623-405f-a6fe-bb2b9d1afd09"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dpad Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""623f0ac5-31fe-49b0-87fa-87c369693086"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dpad Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c5b75676-a102-48af-aea8-24b6a20d60c1"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dpad Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_DpadUp = m_UI.FindAction("Dpad Up", throwIfNotFound: true);
        m_UI_DpadDown = m_UI.FindAction("Dpad Down", throwIfNotFound: true);
        m_UI_DpadLeft = m_UI.FindAction("Dpad Left", throwIfNotFound: true);
        m_UI_DpadRight = m_UI.FindAction("Dpad Right", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_DpadUp;
    private readonly InputAction m_UI_DpadDown;
    private readonly InputAction m_UI_DpadLeft;
    private readonly InputAction m_UI_DpadRight;
    public struct UIActions
    {
        private @PlayerControll m_Wrapper;
        public UIActions(@PlayerControll wrapper) { m_Wrapper = wrapper; }
        public InputAction @DpadUp => m_Wrapper.m_UI_DpadUp;
        public InputAction @DpadDown => m_Wrapper.m_UI_DpadDown;
        public InputAction @DpadLeft => m_Wrapper.m_UI_DpadLeft;
        public InputAction @DpadRight => m_Wrapper.m_UI_DpadRight;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @DpadUp.started += instance.OnDpadUp;
            @DpadUp.performed += instance.OnDpadUp;
            @DpadUp.canceled += instance.OnDpadUp;
            @DpadDown.started += instance.OnDpadDown;
            @DpadDown.performed += instance.OnDpadDown;
            @DpadDown.canceled += instance.OnDpadDown;
            @DpadLeft.started += instance.OnDpadLeft;
            @DpadLeft.performed += instance.OnDpadLeft;
            @DpadLeft.canceled += instance.OnDpadLeft;
            @DpadRight.started += instance.OnDpadRight;
            @DpadRight.performed += instance.OnDpadRight;
            @DpadRight.canceled += instance.OnDpadRight;
        }

        private void UnregisterCallbacks(IUIActions instance)
        {
            @DpadUp.started -= instance.OnDpadUp;
            @DpadUp.performed -= instance.OnDpadUp;
            @DpadUp.canceled -= instance.OnDpadUp;
            @DpadDown.started -= instance.OnDpadDown;
            @DpadDown.performed -= instance.OnDpadDown;
            @DpadDown.canceled -= instance.OnDpadDown;
            @DpadLeft.started -= instance.OnDpadLeft;
            @DpadLeft.performed -= instance.OnDpadLeft;
            @DpadLeft.canceled -= instance.OnDpadLeft;
            @DpadRight.started -= instance.OnDpadRight;
            @DpadRight.performed -= instance.OnDpadRight;
            @DpadRight.canceled -= instance.OnDpadRight;
        }

        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActions @UI => new UIActions(this);
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IUIActions
    {
        void OnDpadUp(InputAction.CallbackContext context);
        void OnDpadDown(InputAction.CallbackContext context);
        void OnDpadLeft(InputAction.CallbackContext context);
        void OnDpadRight(InputAction.CallbackContext context);
    }
}
